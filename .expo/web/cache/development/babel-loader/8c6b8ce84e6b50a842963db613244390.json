{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport AsyncStorageLib from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useState } from 'react';\nimport HomePage from \"./components/Home-Page/home-page\";\nimport LoginPage from \"./components/Login-Page/login-page\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState({\n    id: AsyncStorageLib.getItem('id'),\n    name: AsyncStorageLib.getItem('fullname'),\n    isAuthenticated: AsyncStorageLib.getItem('isAuthenticated'),\n    isManager: AsyncStorageLib.getItem('isManager'),\n    username: AsyncStorageLib.getItem('username')\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var Stack = createNativeStackNavigator();\n  console.log(user.isAuthenticated);\n\n  if (!user.isAuthenticated === true) {\n    return _jsx(NavigationContainer, {\n      children: _jsx(Stack.Navigator, {\n        initialRouteName: \"Login-Page\",\n        children: _jsx(Stack.Screen, {\n          name: \"Login-Page\",\n          children: function children(props) {\n            return _jsx(LoginPage, _objectSpread(_objectSpread({}, props), {}, {\n              updateUser: setUser\n            }));\n          }\n        })\n      })\n    });\n  } else {\n    return _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        initialRouteName: \"Home-Page\",\n        children: [_jsx(Stack.Screen, {\n          name: \"Employee\",\n          children: function children(props) {\n            return _jsx(HomePage, _objectSpread(_objectSpread({}, props), {}, {\n              employee: user,\n              updateEmployee: setUser\n            }));\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"Manager\",\n          children: function children(props) {\n            return _jsx(HomePage, _objectSpread(_objectSpread({}, props), {}, {\n              employee: user,\n              updateEmployee: setUser\n            }));\n          }\n        })]\n      })\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/JPBAZ/Desktop/Project_1_Mobile_Front_End/App.tsx"],"names":["AsyncStorageLib","NavigationContainer","createNativeStackNavigator","useState","HomePage","LoginPage","App","id","getItem","name","isAuthenticated","isManager","username","user","setUser","Stack","console","log","props"],"mappings":";;;;;;;AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,QAAP;AACA,OAAOC,SAAP;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAwBH,QAAQ,CAAC;AAC/BI,IAAAA,EAAE,EAAEP,eAAe,CAACQ,OAAhB,CAAwB,IAAxB,CAD2B;AAE/BC,IAAAA,IAAI,EAAET,eAAe,CAACQ,OAAhB,CAAwB,UAAxB,CAFyB;AAG/BE,IAAAA,eAAe,EAAEV,eAAe,CAACQ,OAAhB,CAAwB,iBAAxB,CAHc;AAI/BG,IAAAA,SAAS,EAAEX,eAAe,CAACQ,OAAhB,CAAwB,WAAxB,CAJoB;AAK/BI,IAAAA,QAAQ,EAAEZ,eAAe,CAACQ,OAAhB,CAAwB,UAAxB;AALqB,GAAD,CAAhC;AAAA;AAAA,MAAOK,IAAP;AAAA,MAAaC,OAAb;;AAQA,MAAMC,KAAK,GAAGb,0BAA0B,EAAxC;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACH,eAAjB;;AAEA,MAAI,CAACG,IAAI,CAACH,eAAN,KAA0B,IAA9B,EAAoC;AAClC,WACE,KAAC,mBAAD;AAAA,gBACE,KAAC,KAAD,CAAO,SAAP;AAAiB,QAAA,gBAAgB,EAAC,YAAlC;AAAA,kBACE,KAAC,KAAD,CAAO,MAAP;AAAc,UAAA,IAAI,EAAC,YAAnB;AAAA,oBACG,kBAACQ,KAAD;AAAA,mBAAW,KAAC,SAAD,kCAAeA,KAAf;AAAsB,cAAA,UAAU,EAAEJ;AAAlC,eAAX;AAAA;AADH;AADF;AADF,MADF;AASD,GAVD,MAUO;AACL,WACE,KAAC,mBAAD;AAAA,gBACE,MAAC,KAAD,CAAO,SAAP;AAAiB,QAAA,gBAAgB,EAAC,WAAlC;AAAA,mBACE,KAAC,KAAD,CAAO,MAAP;AAAc,UAAA,IAAI,EAAC,UAAnB;AAAA,oBACG,kBAACI,KAAD;AAAA,mBACC,KAAC,QAAD,kCAAcA,KAAd;AAAqB,cAAA,QAAQ,EAAEL,IAA/B;AAAqC,cAAA,cAAc,EAAEC;AAArD,eADD;AAAA;AADH,UADF,EAME,KAAC,KAAD,CAAO,MAAP;AAAc,UAAA,IAAI,EAAC,SAAnB;AAAA,oBACG,kBAACI,KAAD;AAAA,mBACC,KAAC,QAAD,kCAAcA,KAAd;AAAqB,cAAA,QAAQ,EAAEL,IAA/B;AAAqC,cAAA,cAAc,EAAEC;AAArD,eADD;AAAA;AADH,UANF;AAAA;AADF,MADF;AAgBD;AACF","sourcesContent":["import AsyncStorageLib from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport HomePage from './components/Home-Page/home-page';\nimport LoginPage from './components/Login-Page/login-page';\n\nexport default function App() {\n  const [user, setUser] = useState({\n    id: AsyncStorageLib.getItem('id'),\n    name: AsyncStorageLib.getItem('fullname'),\n    isAuthenticated: AsyncStorageLib.getItem('isAuthenticated'),\n    isManager: AsyncStorageLib.getItem('isManager'),\n    username: AsyncStorageLib.getItem('username'),\n  });\n\n  const Stack = createNativeStackNavigator();\n  console.log(user.isAuthenticated);\n\n  if (!user.isAuthenticated === true) {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName='Login-Page'>\n          <Stack.Screen name='Login-Page'>\n            {(props) => <LoginPage {...props} updateUser={setUser} />}\n          </Stack.Screen>\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  } else {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName='Home-Page'>\n          <Stack.Screen name='Employee'>\n            {(props) => (\n              <HomePage {...props} employee={user} updateEmployee={setUser} />\n            )}\n          </Stack.Screen>\n          <Stack.Screen name='Manager'>\n            {(props) => (\n              <HomePage {...props} employee={user} updateEmployee={setUser} />\n            )}\n          </Stack.Screen>\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}