{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { backendAddress } from \"../../dtos/backend-address\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginPage(props) {\n  var usernameInput = useRef(null);\n  var passwordInput = useRef(null);\n  var removeMe = 0;\n\n  function login() {\n    var _usernameInput$curren, _usernameInput$curren2, _passwordInput$curren, _passwordInput$curren2;\n\n    var loginPayload, response, user, userId, isManager, fullname, uname, authenticated, reimAccount;\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            loginPayload = {\n              username: (_usernameInput$curren = (_usernameInput$curren2 = usernameInput.current) == null ? void 0 : _usernameInput$curren2.value) != null ? _usernameInput$curren : '',\n              password: (_passwordInput$curren = (_passwordInput$curren2 = passwordInput.current) == null ? void 0 : _passwordInput$curren2.value) != null ? _passwordInput$curren : ''\n            };\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(backendAddress + \"/login\", {\n              method: 'PATCH',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(loginPayload)\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            user = _context.sent;\n            userId = user.id;\n            isManager = user.isManager ? true : false;\n            fullname = user.fname + \" \" + user.lname;\n            uname = user.username;\n            authenticated = true;\n            reimAccount = user.reimburseAccount;\n            props.updateUser({\n              id: userId,\n              username: uname,\n              name: fullname,\n              isManager: isManager,\n              isAuthenticated: authenticated,\n              reimburseAccount: reimAccount\n            });\n            AsyncStorage.setItem('id', userId);\n            AsyncStorage.setItem('fullname', fullname);\n            AsyncStorage.setItem('isAuthenticated', 'true');\n            AsyncStorage.setItem('username', uname);\n\n            if (isManager) {\n              AsyncStorage.setItem('isManager', 'true');\n              props.navigation.navigate('Manager');\n            } else {\n              props.navigation.navigate('Employee');\n            }\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Welcome!\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"username\",\n      ref: usernameInput\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"password\",\n      ref: passwordInput,\n      textContentType: \"password\"\n    }), _jsx(Button, {\n      onPress: login,\n      title: \"Login\",\n      color: \"#841584\",\n      accessibilityLabel: \"Login Here\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  input: {\n    height: 40,\n    width: 200,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/JPBAZ/Desktop/Project_1_Mobile_Front_End/components/Login-Page/login-page.tsx"],"names":["React","useRef","backendAddress","AsyncStorage","LoginPage","props","usernameInput","passwordInput","removeMe","login","loginPayload","username","current","value","password","fetch","method","headers","body","JSON","stringify","response","json","user","userId","id","isManager","fullname","fname","lname","uname","authenticated","reimAccount","reimburseAccount","updateUser","name","isAuthenticated","setItem","navigation","navigate","styles","container","input","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","height","width","margin","borderWidth","padding"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport React, { useRef, useState } from 'react';\r\nimport { StyleSheet, View, Text, TextInput, Button } from 'react-native';\r\nimport { backendAddress } from '../../dtos/backend-address';\r\nimport { Reimbursement } from '../../dtos/dtos';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport default function LoginPage(props: { updateUser: Function; navigation }) {\r\n  const usernameInput = useRef(null);\r\n  const passwordInput = useRef(null);\r\n  let removeMe = 0;\r\n\r\n  async function login() {\r\n    const loginPayload = {\r\n      username: usernameInput.current?.value ?? '',\r\n      password: passwordInput.current?.value ?? '',\r\n    };\r\n\r\n    const response = await fetch(`${backendAddress}/login`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(loginPayload),\r\n    });\r\n\r\n    const user = await response.json();\r\n    const userId: string = user.id;\r\n    const isManager: boolean = user.isManager ? true : false;\r\n    const fullname = `${user.fname} ${user.lname}`;\r\n    const uname = user.username;\r\n    const authenticated: boolean = true;\r\n    const reimAccount: Reimbursement[] = user.reimburseAccount;\r\n\r\n    props.updateUser({\r\n      id: userId,\r\n      username: uname,\r\n      name: fullname,\r\n      isManager: isManager,\r\n      isAuthenticated: authenticated,\r\n      reimburseAccount: reimAccount,\r\n    });\r\n\r\n    AsyncStorage.setItem('id', userId);\r\n    AsyncStorage.setItem('fullname', fullname);\r\n    AsyncStorage.setItem('isAuthenticated', 'true');\r\n    AsyncStorage.setItem('username', uname);\r\n    if (isManager) {\r\n      AsyncStorage.setItem('isManager', 'true');\r\n      props.navigation.navigate('Manager');\r\n    } else {\r\n      props.navigation.navigate('Employee');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>Welcome!</Text>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder='username'\r\n        ref={usernameInput}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder='password'\r\n        ref={passwordInput}\r\n        textContentType='password'\r\n      />\r\n      <Button\r\n        onPress={login}\r\n        title='Login'\r\n        color='#841584'\r\n        accessibilityLabel='Login Here'\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: 200,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}